### YamlMime:ManagedReference
items:
- uid: smIRCL.SupportedChannelModes
  commentId: T:smIRCL.SupportedChannelModes
  id: SupportedChannelModes
  parent: smIRCL
  children:
  - smIRCL.SupportedChannelModes.A
  - smIRCL.SupportedChannelModes.B
  - smIRCL.SupportedChannelModes.C
  - smIRCL.SupportedChannelModes.D
  langs:
  - csharp
  - vb
  name: SupportedChannelModes
  nameWithType: SupportedChannelModes
  fullName: smIRCL.SupportedChannelModes
  type: Class
  source:
    remote:
      path: smIRCL/SupportedChannelModes.cs
      branch: master
      repo: https://github.com/alexhorner/smIRCL.git
    id: SupportedChannelModes
    path: ../smIRCL/SupportedChannelModes.cs
    startLine: 4
  assemblies:
  - smIRCL
  namespace: smIRCL
  syntax:
    content: public class SupportedChannelModes
    content.vb: Public Class SupportedChannelModes
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: smIRCL.SupportedChannelModes.A
  commentId: P:smIRCL.SupportedChannelModes.A
  id: A
  parent: smIRCL.SupportedChannelModes
  langs:
  - csharp
  - vb
  name: A
  nameWithType: SupportedChannelModes.A
  fullName: smIRCL.SupportedChannelModes.A
  type: Property
  source:
    remote:
      path: smIRCL/SupportedChannelModes.cs
      branch: master
      repo: https://github.com/alexhorner/smIRCL.git
    id: A
    path: ../smIRCL/SupportedChannelModes.cs
    startLine: 6
  assemblies:
  - smIRCL
  namespace: smIRCL
  syntax:
    content: public List<char> A { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Char}
    content.vb: Public Property A As List(Of Char)
  overload: smIRCL.SupportedChannelModes.A*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: smIRCL.SupportedChannelModes.B
  commentId: P:smIRCL.SupportedChannelModes.B
  id: B
  parent: smIRCL.SupportedChannelModes
  langs:
  - csharp
  - vb
  name: B
  nameWithType: SupportedChannelModes.B
  fullName: smIRCL.SupportedChannelModes.B
  type: Property
  source:
    remote:
      path: smIRCL/SupportedChannelModes.cs
      branch: master
      repo: https://github.com/alexhorner/smIRCL.git
    id: B
    path: ../smIRCL/SupportedChannelModes.cs
    startLine: 7
  assemblies:
  - smIRCL
  namespace: smIRCL
  syntax:
    content: public List<char> B { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Char}
    content.vb: Public Property B As List(Of Char)
  overload: smIRCL.SupportedChannelModes.B*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: smIRCL.SupportedChannelModes.C
  commentId: P:smIRCL.SupportedChannelModes.C
  id: C
  parent: smIRCL.SupportedChannelModes
  langs:
  - csharp
  - vb
  name: C
  nameWithType: SupportedChannelModes.C
  fullName: smIRCL.SupportedChannelModes.C
  type: Property
  source:
    remote:
      path: smIRCL/SupportedChannelModes.cs
      branch: master
      repo: https://github.com/alexhorner/smIRCL.git
    id: C
    path: ../smIRCL/SupportedChannelModes.cs
    startLine: 8
  assemblies:
  - smIRCL
  namespace: smIRCL
  syntax:
    content: public List<char> C { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Char}
    content.vb: Public Property C As List(Of Char)
  overload: smIRCL.SupportedChannelModes.C*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: smIRCL.SupportedChannelModes.D
  commentId: P:smIRCL.SupportedChannelModes.D
  id: D
  parent: smIRCL.SupportedChannelModes
  langs:
  - csharp
  - vb
  name: D
  nameWithType: SupportedChannelModes.D
  fullName: smIRCL.SupportedChannelModes.D
  type: Property
  source:
    remote:
      path: smIRCL/SupportedChannelModes.cs
      branch: master
      repo: https://github.com/alexhorner/smIRCL.git
    id: D
    path: ../smIRCL/SupportedChannelModes.cs
    startLine: 9
  assemblies:
  - smIRCL
  namespace: smIRCL
  syntax:
    content: public List<char> D { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Char}
    content.vb: Public Property D As List(Of Char)
  overload: smIRCL.SupportedChannelModes.D*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: smIRCL
  commentId: N:smIRCL
  name: smIRCL
  nameWithType: smIRCL
  fullName: smIRCL
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: smIRCL.SupportedChannelModes.A*
  commentId: Overload:smIRCL.SupportedChannelModes.A
  name: A
  nameWithType: SupportedChannelModes.A
  fullName: smIRCL.SupportedChannelModes.A
- uid: System.Collections.Generic.List{System.Char}
  commentId: T:System.Collections.Generic.List{System.Char}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Char>
  nameWithType: List<Char>
  fullName: System.Collections.Generic.List<System.Char>
  nameWithType.vb: List(Of Char)
  fullName.vb: System.Collections.Generic.List(Of System.Char)
  name.vb: List(Of Char)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: smIRCL.SupportedChannelModes.B*
  commentId: Overload:smIRCL.SupportedChannelModes.B
  name: B
  nameWithType: SupportedChannelModes.B
  fullName: smIRCL.SupportedChannelModes.B
- uid: smIRCL.SupportedChannelModes.C*
  commentId: Overload:smIRCL.SupportedChannelModes.C
  name: C
  nameWithType: SupportedChannelModes.C
  fullName: smIRCL.SupportedChannelModes.C
- uid: smIRCL.SupportedChannelModes.D*
  commentId: Overload:smIRCL.SupportedChannelModes.D
  name: D
  nameWithType: SupportedChannelModes.D
  fullName: smIRCL.SupportedChannelModes.D
